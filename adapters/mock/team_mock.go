// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apartmentlines/mattermost-plugin-poor-mans-scheduled-messages/internal/ports (interfaces: TeamService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost/server/public/model"
)

// MockTeamService is a mock of TeamService interface.
type MockTeamService struct {
	ctrl     *gomock.Controller
	recorder *MockTeamServiceMockRecorder
}

// MockTeamServiceMockRecorder is the mock recorder for MockTeamService.
type MockTeamServiceMockRecorder struct {
	mock *MockTeamService
}

// NewMockTeamService creates a new mock instance.
func NewMockTeamService(ctrl *gomock.Controller) *MockTeamService {
	mock := &MockTeamService{ctrl: ctrl}
	mock.recorder = &MockTeamServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamService) EXPECT() *MockTeamServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTeamService) Get(arg0 string) (*model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTeamServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTeamService)(nil).Get), arg0)
}
