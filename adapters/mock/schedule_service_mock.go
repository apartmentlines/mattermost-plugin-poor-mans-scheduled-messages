// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apartmentlines/mattermost-plugin-poor-mans-scheduled-messages/internal/ports (interfaces: ScheduleService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost/server/public/model"
)

// MockScheduleService is a mock of ScheduleService interface.
type MockScheduleService struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleServiceMockRecorder
}

// MockScheduleServiceMockRecorder is the mock recorder for MockScheduleService.
type MockScheduleServiceMockRecorder struct {
	mock *MockScheduleService
}

// NewMockScheduleService creates a new mock instance.
func NewMockScheduleService(ctrl *gomock.Controller) *MockScheduleService {
	mock := &MockScheduleService{ctrl: ctrl}
	mock.recorder = &MockScheduleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleService) EXPECT() *MockScheduleServiceMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockScheduleService) Build(arg0 *model.CommandArgs, arg1 string) *model.CommandResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0, arg1)
	ret0, _ := ret[0].(*model.CommandResponse)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockScheduleServiceMockRecorder) Build(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockScheduleService)(nil).Build), arg0, arg1)
}
