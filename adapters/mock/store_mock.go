// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apartmentlines/mattermost-plugin-poor-mans-scheduled-messages/internal/ports (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/apartmentlines/mattermost-plugin-poor-mans-scheduled-messages/server/types"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CleanupMessageFromUserIndex mocks base method.
func (m *MockStore) CleanupMessageFromUserIndex(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupMessageFromUserIndex", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupMessageFromUserIndex indicates an expected call of CleanupMessageFromUserIndex.
func (mr *MockStoreMockRecorder) CleanupMessageFromUserIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupMessageFromUserIndex", reflect.TypeOf((*MockStore)(nil).CleanupMessageFromUserIndex), arg0, arg1)
}

// DeleteScheduledMessage mocks base method.
func (m *MockStore) DeleteScheduledMessage(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScheduledMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScheduledMessage indicates an expected call of DeleteScheduledMessage.
func (mr *MockStoreMockRecorder) DeleteScheduledMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScheduledMessage", reflect.TypeOf((*MockStore)(nil).DeleteScheduledMessage), arg0, arg1)
}

// GenerateMessageID mocks base method.
func (m *MockStore) GenerateMessageID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMessageID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateMessageID indicates an expected call of GenerateMessageID.
func (mr *MockStoreMockRecorder) GenerateMessageID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMessageID", reflect.TypeOf((*MockStore)(nil).GenerateMessageID))
}

// GetScheduledMessage mocks base method.
func (m *MockStore) GetScheduledMessage(arg0 string) (*types.ScheduledMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledMessage", arg0)
	ret0, _ := ret[0].(*types.ScheduledMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledMessage indicates an expected call of GetScheduledMessage.
func (mr *MockStoreMockRecorder) GetScheduledMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledMessage", reflect.TypeOf((*MockStore)(nil).GetScheduledMessage), arg0)
}

// ListScheduledMessages mocks base method.
func (m *MockStore) ListScheduledMessages() ([]*types.ScheduledMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScheduledMessages")
	ret0, _ := ret[0].([]*types.ScheduledMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScheduledMessages indicates an expected call of ListScheduledMessages.
func (mr *MockStoreMockRecorder) ListScheduledMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScheduledMessages", reflect.TypeOf((*MockStore)(nil).ListScheduledMessages))
}

// ListUserMessageIDs mocks base method.
func (m *MockStore) ListUserMessageIDs(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserMessageIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserMessageIDs indicates an expected call of ListUserMessageIDs.
func (mr *MockStoreMockRecorder) ListUserMessageIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserMessageIDs", reflect.TypeOf((*MockStore)(nil).ListUserMessageIDs), arg0)
}

// SaveScheduledMessage mocks base method.
func (m *MockStore) SaveScheduledMessage(arg0 string, arg1 *types.ScheduledMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveScheduledMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveScheduledMessage indicates an expected call of SaveScheduledMessage.
func (mr *MockStoreMockRecorder) SaveScheduledMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveScheduledMessage", reflect.TypeOf((*MockStore)(nil).SaveScheduledMessage), arg0, arg1)
}
