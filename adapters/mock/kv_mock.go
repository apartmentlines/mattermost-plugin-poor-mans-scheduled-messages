// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apartmentlines/mattermost-plugin-poor-mans-scheduled-messages/internal/ports (interfaces: KVService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pluginapi "github.com/mattermost/mattermost/server/public/pluginapi"
)

// MockKVService is a mock of KVService interface.
type MockKVService struct {
	ctrl     *gomock.Controller
	recorder *MockKVServiceMockRecorder
}

// MockKVServiceMockRecorder is the mock recorder for MockKVService.
type MockKVServiceMockRecorder struct {
	mock *MockKVService
}

// NewMockKVService creates a new mock instance.
func NewMockKVService(ctrl *gomock.Controller) *MockKVService {
	mock := &MockKVService{ctrl: ctrl}
	mock.recorder = &MockKVServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVService) EXPECT() *MockKVServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKVService) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKVServiceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKVService)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockKVService) Get(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockKVServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVService)(nil).Get), arg0, arg1)
}

// ListKeys mocks base method.
func (m *MockKVService) ListKeys(arg0, arg1 int, arg2 ...pluginapi.ListKeysOption) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeys", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockKVServiceMockRecorder) ListKeys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockKVService)(nil).ListKeys), varargs...)
}

// Set mocks base method.
func (m *MockKVService) Set(arg0 string, arg1 interface{}, arg2 ...pluginapi.KVSetOption) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockKVServiceMockRecorder) Set(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKVService)(nil).Set), varargs...)
}
