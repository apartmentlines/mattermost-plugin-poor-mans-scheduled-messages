// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apartmentlines/mattermost-plugin-poor-mans-scheduled-messages/internal/ports (interfaces: SlashCommandService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost/server/public/model"
)

// MockSlashCommandService is a mock of SlashCommandService interface.
type MockSlashCommandService struct {
	ctrl     *gomock.Controller
	recorder *MockSlashCommandServiceMockRecorder
}

// MockSlashCommandServiceMockRecorder is the mock recorder for MockSlashCommandService.
type MockSlashCommandServiceMockRecorder struct {
	mock *MockSlashCommandService
}

// NewMockSlashCommandService creates a new mock instance.
func NewMockSlashCommandService(ctrl *gomock.Controller) *MockSlashCommandService {
	mock := &MockSlashCommandService{ctrl: ctrl}
	mock.recorder = &MockSlashCommandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlashCommandService) EXPECT() *MockSlashCommandServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockSlashCommandService) Register(arg0 *model.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockSlashCommandServiceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSlashCommandService)(nil).Register), arg0)
}
